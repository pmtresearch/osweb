<!DOCTYPE html>
<!--
    OSWEB is distributed under the terms of the GNU General Public License 3.
    The full license should be included in the file COPYING, 
    or can be obtained from: http://www.gnu.org/licenses/gpl.txt
-->
<html>		
	<head>
		<!-- Head - general definitions -->
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<!-- JavaScript -->
		<script type="text/javascript" src="js/gzip.js"></script>
	</head>
   <body>				
		<script src="js/PixiTextInput.js"></script>
 		<!-- Body - Command bar definitions -->
		<nav class="navbar navbar-default navbar-fixed-top cogsci-navbar">
			<div class="container">
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
					<a class="navbar-brand" style="padding: 7px" href="/">
						<img style="height: 100%" alt="Brand" 
						src="<%= require('../img/osdoc.png') %>"
					>
					</a>
				</div>
				<div id="navbar" class="collapse navbar-collapse">
					<form class="navbar-form navbar-right">
						<div class="form-group">
						</div>
					</form>
					<form class="navbar-form navbar-right">
						<div class="form-group">
							<select style="height:34px;padding-right: 5px;" id="exampleTasks" class="taskselect" selected="false" onchange="selectExampleTask()">>
	 					  	    <option disabled selected value> Example experiments … </option>
  								<option value="text;lexical-decision.osexp">Lexical decision</option>
  								<option value="binary;gaze-cuing.osexp">Gaze cuing</option>
							</select>
						</div>
						<div class="form-group">
							<button class="btn btn-success" id="run_button" type="button" status="run" onclick="runExperiment(); return false" disabled><i class="fa fa-play" aria-hidden="true"></i> Run</button>
							<button class="btn btn-default" id="console_button" type="button" onclick="toggleConsole(); return false"><i class="'fa fa-terminal" aria-hidden="true"></i>Console off</button>
							<button class="btn btn-default" id="debug_button" status="off" type="button" onclick="toggleDebug(); return false"><i class="'fa fa-terminal" aria-hidden="true"></i>Debug off</button>
							<button class="btn btn-default" id="fullscreen_button" status="off" type="button" onclick="toggleFullscreen(); return false"><i class="fa fa-arrows-alt" aria-hidden="true"></i>Fullscreen off</button>
						</div>
					</form>
					<form class="navbar-form">
						<input type="file" id="browse" name="fileupload" style="display: none" onChange="handleChange(event);"/>
						<div class="btn-group" style="display:inline;" role="group" aria-label="Load experiment">
							<button class="btn btn-primary" type="button" id="file_button" onclick="handleBrowseClick();">Local file</button>
						</div>
						<div class="form-group" style="display:inline;">
							<div class="input-group" style="display: table;">
								<span style="width: 1%" class="input-group-addon" id="loaded-exp">Loaded:</span>
								<input type="text" class="form-control" id="filename" placeholder="No experiment loaded" readonly />
							</div>
						</div>
					</form>
				</div>
			</div>
		</nav>
		<!-- Body - Experiment canvas and form container -->
    	<div id="body_div">
	 		<!-- Body - OsWeb section -->
			<div id="osweb_div">
			</div>
			<!-- Body - Console section -->
	 		<div id="console_div">
				<div id="osweb_console" style="display: none;">
					<textarea id="osweb_console_text" rows="4" cols="80" style="width:100%;background-color:#000000;color:#00FF00;"></textarea>
				</div>
			</div>
		</div>
		<footer class="footer">
      		<div id="footerbar" class="container">
				<div id="copyright">
					<p class="text-muted">OSWeb 1.0.0a — Copyright Jaap Bos, Daniël Schreij & Sebastiaan Mathôt 2016-2017</p>
	      		</div>
				<div id="licence">
					<p class="text-muted">OSWEB is distributed under the terms of the GNU General Public License 3.</p>
	      		</div>
      		</div>
    	</footer>
	</body>				
    <script>
		// Create the context container for the experiment definitions.
		var context = {
			confirm: confirm,
			debug: true,
			fullScreen: true,
			introClick: true,
			introScreen: true,
			mimetype: '',
			name: 'test',
			onConsole: onConsoleHandler,
			onFinished: onFinishedHandler,
			onLog: onLogHandler,
			prompt: prompt,
			scaleMode: 'exactFit',
			source: null,
			subject: null,
			target: null
		};
	
		// Retrieve the runner object from the osweb library.
	    var runner = osweb.getRunner('osweb_div');
	
	 	// Set position of notifications
	    alertify.set('notifier', 'position', 'bottom-right');

	    // Extend existing 'alert' dialog
	    if (!alertify.errorAlert) {
		    //define a new errorAlert base on alert
		    alertify.dialog('errorAlert', function factory() {
			    return {
				   	build:function() {
				        var errorHeader = '<span class="fa fa-times-circle fa-2x" ' +
					  	    'style="vertical-align:middle;color:#e10000;">' + 
							'</span> Application Error';
					    this.setHeader(errorHeader);
				    }
			    };
		    }, true, 'alert');
	    }

	    // Set event callback for handling error messages using alertify.
	    window.onerror = function(msg, url, line, col, error) {
		    var text = '<p><b>' + msg + '</b></p>' + '<p>See console for further details</p>';
		    alertify.errorAlert(text);
	    }

	    // Prevent the run/stop button from keeping focus after the subject nr dialog box is
	    // closed. Otherwise the stop button is activated when users press spacebar for a
	    // response to the canvas.
    	document.getElementById('run_button').onfocus = function() {
		    this.blur();
	    };

	    // Hack to set the value of the file upload button
	    document.getElementById('file_button').text = 'Select file'; 
	 
   	    /** Disable some buttons once an experiment is loaded. */
	    function buttonsSetToFileLoaded() {
			document.getElementById('file_button').disabled = true;
			document.getElementById('run_button').disabled = false;
			document.getElementById('fullscreen_button').disabled = false;
			document.getElementById('console_button').disabled = false;
			document.getElementById('debug_button').disabled = false;
	    }

		/** Enable experiment loading buttons. */
		function buttonsSetToFileSelection() {
			document.getElementById('file_button').disabled = false;
			document.getElementById('run_button').disabled = true;
			document.getElementById('fullscreen_button').disabled = true;
			document.getElementById('console_button').disabled = true;
			document.getElementById('debug_button').disabled = true;
		}

	    /** Method for handling the hidden file load button. */
	    function handleBrowseClick() {
		    // Simulate a file input click.
		    var fileInput = document.getElementById('browse');
		    fileInput.click();
	    }

	    /**
 	     * Method for handling the hidden file load button.			 
	     * @param {Object} event - The change event.
 	     */
	    function handleChange(event) {
		    // Update the button status.
		    buttonsSetToFileLoaded();

		    // Update the interface.
		    var fileInput = document.getElementById('browse');
		    var textInput = document.getElementById('filename');
		    textInput.value = fileInput.value.split('\\').pop().split('/').pop();

		    // Send feedback to the user.
		    alertify.message('Loaded local file: ' + textInput.value);

			// Only select the first file.
		    context.source = event.target.files[0];
		}   

		function selectExampleTask() {
		    // Update the button status.
		    buttonsSetToFileLoaded();

			var exampleTasks = document.getElementById("exampleTasks");
            var selectedTask = exampleTasks.options[exampleTasks.selectedIndex].value;
			var items = selectedTask.split(';');

			context.mimetype = items[0] + '/';
			context.source = './osexp/' + items[1];
		}

	    /** Show/hide console used by the console print method. */
	    function toggleConsole() {
			var button = document.getElementById('console_button');
		    var c = document.getElementById('osweb_console');
		    if (c.style.display === 'none') {
				// Set the console handler
				context.onConsole = onConsoleHandler;
				
				// Set interface.
			    c.style.display = '';
				button.textContent = 'Console on';
		    } else {
				// Clear the console handler
				context.onConsole = null;
				
				// Set interface.
			    c.style.display = 'none';
				button.textContent = 'Console off';
		    }	
	    }

	    /** Enabled/Disable debugger. */
	    function toggleDebug() {
    		var button = document.getElementById('debug_button');
			if (button.getAttribute('status') === 'off') {
				// Enabled the fullScreen mode.
				context.debug = true; 
				
				// Set the interface.
				button.setAttribute('status','on');
				button.textContent = 'Debug on';
			} else {
				// Disable the fullscreen mode.
				context.debug = false; 

				// Set the interface.
				button.setAttribute('status','off');
				button.textContent = 'Debug off';
			}
	    }

        /** Show canvas in fullscreen mode (Esc minimizes it again) */
	    function toggleFullscreen() {
    		var button = document.getElementById('fullscreen_button');
			if (button.getAttribute('status') === 'off') {
				// Enabled the fullScreen mode.
				context.fullScreen = true; 
				
				// Set the interface.
				button.setAttribute('status','on');
				button.textContent = 'Fullscreen on';
			} else {
				// Disable the fullscreen mode.
				context.fullScreen = false; 

				// Set the interface.
				button.setAttribute('status','off');
				button.textContent = 'Fullscreen off';
			}
		}	

        /** Runs an experiment loaded from file. */
	    function runExperiment(){
			// 'Run experiment' has been clicked
			buttonsSetToFileLoaded();

			if (document.getElementById('run_button').getAttribute('status') === 'run'){ 
				document.getElementById('run_button').setAttribute('status','stop');
				document.getElementById('run_button').innerHTML = '<i class="fa fa-stop" aria-hidden="true"></i> Stop';
				document.getElementById('run_button').classList.remove('btn-success');
				document.getElementById('run_button').classList.add('btn-danger');

				// Set the fullscreen toggle.
				context.fullScreen = (document.getElementById('fullscreen_button').getAttribute('status') === 'on');
				
	    		// Run the experiment within the Runner with the given context.
		    	runner.run(context);
			} else {
				// Stop the experiment
				alertify.confirm('Stopping experiment', 'Are you sure you want to abort the experiment?', 
					function() { 
						runner.exit(); 
					}, 
					function() { 
						/* What to do when cancelled */
					})
					.set('labels', {ok: 'Yes', cancel: 'No'}
				); 
			}
	     } 

   	    /**
 	     * Function to handle confirm dialog messages from the runner.
	     * @param {String} title - The title of the dialog box.
		 * @param {String} message - The message qwithin the dialog box.
 	     * @param {Object} onConfirm - The confirm event.
 	     * @param {Object} onCancel - The cancel event.
 	     */
	    function confirm(title, message, onConfirm, onCancel) {
            alertify.confirm( 
                title, 
                message, 
                function() {
                    onConfirm();
                }, 
                function() {
                    onCancel();
                }.bind(this)
            ).showModal();
	    }

		/**
 	     * Function to handle input prompt dialog messages from the runner.
	     * @param {String} title - The title of the dialog box.
		 * @param {String} message - The message qwithin the dialog box.
		 * @param {String} defaultValue - The default value for the input field.
		 * @param {String} dataType - The datatype to store.
 	     * @param {Object} onConfirm - The confirm event.
 	     * @param {Object} onCancel - The cancel event.
 	     */
	    function prompt(title, message, defaultValue, dataType, onConfirm, onCancel) {
        	alertify.prompt( 
                title, 
                message, 
                defaultValue,
                function(evt, value) {
                    onConfirm(value);
                }, 
                function() {
                    onCancel();
                }.bind(this)
            ).showModal();
	    }

 		/**
     	 * Callback function to print console text to an HTML element.
     	 * @param {String} text - A line of text to print to a console element.
         */
 		function onConsoleHandler(text) {
			// Log the session data to the console.
			if (text !== null) {
        		// Add the text to the console window.
				var a = document.getElementById('osweb_console_text').value;
            	a = a + text + '\r\n';
            	document.getElementById('osweb_console_text').value = a;  
			}	
		}

		/** Callback function for processing after an experiment is finished. 
		 * @param {Object} data - The result data.
		 * @param {Object} sessionData - The session data.
		 */
	    function onFinishedHandler(data, sessionData) {
			// Reset the input buttons
			buttonsSetToFileSelection();

			// Reset the run button.
			document.getElementById('run_button').value = 'Run experiment';
			document.getElementById('run_button').setAttribute('status','run');
			document.getElementById('run_button').innerHTML = '<i class="fa fa-play" aria-hidden="true"></i> Run';
			document.getElementById('run_button').classList.remove('btn-danger');
			document.getElementById('run_button').classList.add('btn-success');

			// Log the optional data to the console.
			if (data !== null) {
				console.log('-- experiment data --');
				console.log(data);
			}

			// Log the optional session data to the console.
			if (sessionData !== null) {
				console.log('-- experiment session data --');
				console.log(sessionData);
			}
	    }

		/**
 	     * Callback function for processing log data
		 * @param {Object} data - The result data.
 	     */
	    function onLogHandler(data) {
			// Log the optional data to the console.
			if (data !== null) {
				console.log(data);
			}
		}	

    </script>
</html> 
