---
API: 2
OpenSesame: 3.0.2
Platform: nt
---
set width 800
set uniform_coordinates "yes"
set title "New experiment"
set subject_parity "even"
set subject_nr 0
set start "experiment"
set sampler_backend "legacy"
set mouse_backend "xpyriment"
set keyboard_backend "legacy"
set height 600
set foreground "white"
set font_size 18
set font_italic "no"
set font_family "mono"
set font_bold "no"
set description "Default description"
set coordinates "uniform"
set compensation 0
set color_backend "legacy"
set clock_backend "legacy"
set canvas_backend "xpyriment"
set bidi "no"
set background "black"

define inline_script decisions
	set description "Executes Python code"
	___run__
	# Testing python operators.
	print('');
	print('step 4 - if then else')
	
	var1 = 100
	if (var1 == 100):
	   print ('1 - Got a true expression value')
	   print (var1)
	
	var2 = 0
	if (var2 != 0):
	   print('1 - Got a true expression value')
	   print(var2)
	else:
	   print('2 - Got a false expression value')
	   print(var2)
	   
	var3 = 100
	if var3 < 200:
	   print('Expression value is less than 200')
	   if var3 == 150:
	      print ('Which is 150')
	   elif var3 == 100:
	      print ('Which is 100')
	   elif var3 == 50:
	      print ('Which is 50')
	elif var3 < 50:
	   print ('Expression value is less than 50')
	else:
	   print ('Could not find true expression')
	   
	__end__
	set _prepare ""

define sequence experiment
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run sketchpad_01 always
	run variables always
	run sketchpad_02 always
	run operators always
	run sketchpad_03 always
	run decisions always
	run sketchpad_04 always
	run loops always
	run sketchpad_05 always
	run libraries always
	run sketchpad_06 always
	run os_vars always
	run sketchpad_07 always
	run os_time always
	run sketchpad_08 always
	run os_canvas always
	run sketchpad_09 always

define inline_script libraries
	set description "Executes Python code"
	___run__
	import math
	
	print('');
	print('step 6 - Python libraries (math/string/time')
	print('c = 3.14')
	
	c = 3.14
	
	print('floor(c)', math.floor(c))
	__end__
	set _prepare ""

define inline_script loops
	set description "Executes Python code"
	___run__
	print('');
	print('step 5 - loops')
	
	i = 2
	while(i < 100):
	   j = 2
	   while(j <= (i/j)):
	      if not(i%j): break
	      j = j + 1
	   if (j > i/j) : print(i, ' is prime')
	   i = i + 1
	__end__
	set _prepare ""

define inline_script operators
	set description "Executes Python code"
	___run__
	# Testing python operators.
	print('');
	print('step 3 - python basic operators')
	print('var a = 10, var b = 10')
	
	a = 10
	b = 10
	
	
	print('a == b', a == b)
	print('a != b', a != b)
	print('a > b', a > b)
	print('a < b', a < b)
	print('a >= b', a >= b)
	print('a <= b', a <= b)
	# print('a <> b', a <> b)
	
	
	 
	 
	__end__
	set _prepare ""

define inline_script os_canvas
	set description "Executes Python code"
	___run__
	print('');
	print('step 9 - Open Sesame canvas functions')
	
	# Create two canvas objects ...
	my_canvas1 = canvas()
	my_canvas1.text('1',True,100,100)
	my_canvas2 = canvas()
	my_canvas2.text('2',True,100,150)
	
	# ... and show them with 1 s in between
	
	t0 = clock.time()
	print('Showing canvas1: ' , t0)
	my_canvas1.show()
	clock.sleep(1000)
	
	t1 = clock.time()
	print('Showing canvas2: ' , t1)
	my_canvas2.show()
	clock.sleep(1000)
	
	t2 = clock.time()
	print('Showing done: ' , t2)
	__end__
	set _prepare ""

define inline_script os_time
	set description "Executes Python code"
	___run__
	print('');
	print('step 8 - Open Sesame clock functions')
	
	print(clock.time())
	
	# Get the timestamp before and after sleeping for 1000 ms
	t0 = clock.time()
	clock.sleep(5000)
	t1 = clock.time()
	time_passed = t1 - t0
	
	print('This should be 5000: ' , time_passed)
	__end__
	set _prepare ""

define inline_script os_vars
	set description "Executes Python code"
	___run__
	print('');
	print('step 7 - OpenSesame vars')
	
	# Set an experimental variable
	var.my_variable = 'my_value'
	
	# Get an experimental variable
	print(var.subject_nr)
	print(var.my_variable)
	print(var.get('my_variable'))
	
	# Set an experimental variable
	var.set('my_variable','my_value2')
	
	# Get an experimental variable
	print(var.my_variable)
	
	# Check if an experimental variable exists
	if var.has('my_variable'):
		print('my_variable exists!')
		
	# Delete (unset) an experimental variable
	var.unset('my_variable')
	
	# Check if an experimental variable exists
	if var.has('my_variable'):
		print('my_variable exists!')
	__end__
	set _prepare ""

define sketchpad sketchpad_01
	set start_response_interval "no"
	set reset_variables "no"
	set duration "keypress"
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Testing script - variables" x=-32 y=0 z_index=0

define sketchpad sketchpad_02
	set start_response_interval "no"
	set reset_variables "no"
	set duration "keypress"
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Testing script - operators" x=-29 y=0 z_index=0

define sketchpad sketchpad_03
	set start_response_interval "no"
	set reset_variables "no"
	set duration "keypress"
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Testing script - if then else" x=-18 y=0 z_index=0

define sketchpad sketchpad_04
	set duration "keypress"
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Testing script - loops" x=-61 y=0 z_index=0

define sketchpad sketchpad_05
	set duration "keypress"
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Testing script - Python Libraries" x=25 y=0 z_index=0

define sketchpad sketchpad_06
	set duration "keypress"
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Testing script - OpenSesame vars" x=34 y=0 z_index=0

define sketchpad sketchpad_07
	set duration "keypress"
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Testing script - OpenSesame Clock" x=40 y=-1 z_index=0

define sketchpad sketchpad_08
	set duration "keypress"
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Testing script - OpenSesame Canvas" x=58 y=1 z_index=0

define sketchpad sketchpad_09
	set duration "keypress"
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="Testing script - Done" x=-62 y=0 z_index=0

define inline_script variables
	set description "Executes Python code"
	___run__
	# Testing python default variables.
	print('step 1a - python basic variables: numbers')
	
	a = 21
	b = 10
	c = 0
	d = 3.1415926
	
	print('a:', a)
	print('b:', b)
	print('c:', c)
	print('d:', d)
	
	
	c = a + b
	print ("c = a + b - value of c is ", c)
	
	c = a - b
	print ("c = a - b - value of c is ", c)
	
	c = a * b
	print ("c = a * b - value of c is ", c)
	
	c = a / b
	print ("c = a / b - value of c is ", c)
	
	c = a % b
	print ("c = a % b - value of c is ", c)
	
	c = a**b 
	print ("c = a ** b - value of c is ", c)
	
	c = a//b 
	print ("c = a//b - value of c is ", c)
	
	# Testing python default variables - calculations
	print('');
	print('step 1b - python basic variables: strings')
	
	str = 'Hello World!'
	
	print(str)
	print(str[0]) 
	print(str[2:5])
	print(str[2:])      
	print(str * 2)     
	print(str + "TEST")
	
	# Testing python default variables.
	print('');
	print('step 2a - python extended variables - list = array in javascript')
	
	mylist = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
	mytinylist = [123, 'john']
	x = mylist[0]
	
	print(mylist)
	print(mytinylist)
	print(x)
	
	print('');
	print('step 2b - python extended variables - tupple = JSON in javascript')
	
	mytuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
	mytinytuple = (123, 'john')
	
	print(mytuple)
	print(mytinytuple)
	
	print('');
	print('step 2c - python extended variables - dictionary = JSON in javascript')
	
	mydict = {}
	mytinydict = {'name': 'john','code':6734, 'dept': 'sales'}
	
	print(mydict)
	print(mytinydict)
	__end__
	set _prepare ""

